//All these version numbers should be updated, but only during preseason.
plugins {
	id 'org.hidetake.ssh' version "2.7.2"
	id "java"
	id "eclipse"
	id "idea"
	id "jaci.openrio.gradle.GradleRIO" version "2017.1.1"
	id "com.google.protobuf" version "0.8.0"
}

group 'org.usfirst.frc.team449.Generic'
version '1.0'

allprojects {
	tasks.withType(Javadoc).all { enabled = false }
	repositories {
		maven {
			url 'https://jitpack.io'
		}
	}
}

remotes {
	rio {
		host = 'roboRIO-449-frc.local'
		user = 'lvuser'
		knownHosts = allowAnyHosts
	}
}

repositories {
	mavenCentral()
	maven {
		name = "GradleRio"
		url = "http://dev.imjac.in/maven"
	}

	maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
	compile 'com.google.protobuf:protobuf-java:3.0.0'
	compile 'io.grpc:grpc-stub:1.0.0-pre2'
	compile 'io.grpc:grpc-protobuf:1.0.0-pre2'
	compile 'com.github.blair-robot-project:449-central-repo:v4.0.0-WPILib2017'
	compile wpilib()
	compile talonSrx()
	compile fileTree(dir: "lib", include: "*.jar")
}

protobuf {
	generatedFilesBaseDir = "$projectDir/gen"
	protoc {
		// The artifact spec for the Protobuf Compiler
		artifact = 'com.google.protobuf:protoc:3.0.0'
	}
	plugins {
		// Optional: an artifact spec for a protoc plugin, with "grpc" as
		// the identifier, which can be referred to in the "plugins"
		// container of the "generateProtoTasks" closure.
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
		}
	}
	generateProtoTasks {
		ofSourceSet('main')*.plugins {
			// Apply the "grpc" plugin whose spec is defined above, without
			// options.  Note the braces cannot be omitted, otherwise the
			// plugin will not be added. This is because of the implicit way
			// NamedDomainObjectContainer binds the methods.
			grpc {}
		}
	}
}

clean {
	delete protobuf.generatedFilesBaseDir
}

idea {
	module {
		sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
	}
}

task convertFiles {
	doLast {
		fileTree("./src/main/resources").matching { include "*" }.each { aFile ->
			exec {
				commandLine 'dos2unix'
				args aFile.absolutePath
			}
		}
	}
}

frc {
	team = '449'
	robotClass = "org.usfirst.frc.team449.robot.Robot"
}

wpi {
	wpilibVersion = "+"                   // The WPILib version to use.
	ntcoreVersion = "+"                   // The NetworkTables Core version to use.
	opencvVersion = "+"                   // The OpenCV version to use
	cscoreVersion = "+"                   // The CSCore version to use

	talonSrxVersion = "+"                 // The CTRE Toolsuite (Talon SRX) version to use.
}

def robotManifest = {
	attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
	attributes 'Robot-Class': frc.robotClass
}

jar {
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	manifest robotManifest
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task('copyResources', dependsOn: convertFiles) {
	doLast {
		ssh.run {
			session(remotes.rio) {
				execute 'mkdir ~/449_resources', ignoreError: true
				execute 'mkdir ~/logs', ignoreError: true
				put from: 'src/main/resources/*', into: './449_resources/'
			}
		}
	}
}

artifacts {
	archives genJavadoc
}